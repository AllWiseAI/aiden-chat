name: Release App

on:
  workflow_dispatch:
  release:
    types: [published]

jobs:
  create-release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20.17.0"

      - name: Get version
        run: |
          echo "PACKAGE_VERSION=$(node -p "require('./src-tauri/tauri.conf.json').package.version")" >> $GITHUB_ENV

      - name: Create release (get latest release id)
        id: create-release
        uses: actions/github-script@v6
        with:
          script: |
            const { data } = await github.rest.repos.getLatestRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
            })
            return data.id

  build:
    needs: create-release
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          # mac 架构
          - arch: x86_64
            rust_target: x86_64-apple-darwin
            artifact_arch: x64
            os: macos-latest
          - arch: arm64
            rust_target: aarch64-apple-darwin
            artifact_arch: arm64
            os: macos-latest
          # windows 架构
          - arch: x86_64
            rust_target: x86_64-pc-windows-msvc
            artifact_arch: x64
            os: windows-latest

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20.17.0"
          cache: "yarn"

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.rust_target }}

      - name: Install frontend dependencies
        run: yarn install

      - name: Get package version
        shell: bash
        run: |
          VERSION=$(node -p "require('./src-tauri/tauri.conf.json').package.version")
          echo "PACKAGE_VERSION=$VERSION" >> $GITHUB_ENV

      - name: Update tauri config
        run: bash ./update_tauri_config.sh --mode release
        shell: bash

      - name: Download host_server, uv, bun binaries
        run: bash .github/scripts/download-bin.sh ${{ matrix.arch }} ${{ matrix.os }}
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        shell: bash

      - name: Inject environment variables
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            {
              echo "NPM_CONFIG_REGISTRY=${{ secrets.NPM_CONFIG_REGISTRY }}"
              echo "UV_INDEX=${{ secrets.UV_INDEX }}"
              echo "UV_DEFAULT_INDEX=${{ secrets.UV_DEFAULT_INDEX }}"
              echo "UV_EXTRA_INDEX_URL=${{ secrets.UV_EXTRA_INDEX_URL }}"
            } > src-tauri/bin/.env
          else
            {
              echo "NPM_CONFIG_REGISTRY=${{ secrets.NPM_CONFIG_REGISTRY }}"
              echo "UV_INDEX=${{ secrets.UV_INDEX }}"
              echo "UV_DEFAULT_INDEX=${{ secrets.UV_DEFAULT_INDEX }}"
              echo "UV_EXTRA_INDEX_URL=${{ secrets.UV_EXTRA_INDEX_URL }}"
              echo "HOST_SERVER_VERSION=$(cat .host_server_version)"
            } > src-tauri/bin/.env
          fi

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
          args: --target ${{ matrix.rust_target }}

      - name: Setup macOS code signing (macOS only)
        if: runner.os == 'macOS'
        shell: bash
        run: bash .github/scripts/setup-macos-codesign.sh
        env:
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_SIGN_IDENTITY: ${{ secrets.APPLE_SIGN_IDENTITY }}

      - name: Sign all binaries and app (macOS only)
        if: runner.os == 'macOS'
        shell: bash
        run: bash .github/scripts/sign-all.sh ${{ matrix.arch }}
        env:
          APPLE_SIGN_IDENTITY: ${{ secrets.APPLE_SIGN_IDENTITY }}

      - name: Check missing signatures (macOS only)
        if: runner.os == 'macOS'
        shell: bash
        run: bash .github/scripts/check-signature.sh ${{ matrix.arch }}
        env:
          APPLE_SIGN_IDENTITY: ${{ secrets.APPLE_SIGN_IDENTITY }}

      - name: get version (macOS only)
        if: runner.os == 'macOS'
        shell: bash
        run: |
          echo "📦 获取 src-tauri 中配置的版本号..."
          echo "PACKAGE_VERSION=$(node -p "require('./src-tauri/tauri.conf.json').package.version")" >> $GITHUB_ENV

      - name: Notarize app and DMG (macOS only)
        if: runner.os == 'macOS'
        shell: bash
        run: bash .github/scripts/notarize.sh ${{ matrix.arch }}
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_APP_PASSWORD: ${{ secrets.APPLE_APP_PASSWORD }}
          APPLE_SIGN_IDENTITY: ${{ secrets.APPLE_SIGN_IDENTITY }}
          PACKAGE_VERSION: ${{ env.PACKAGE_VERSION }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}

      - name: List build artifacts
        shell: bash
        run: ls -R src-tauri/target/

      - name: Set mapped arch name
        id: arch_map
        shell: bash
        run: |
          if [ "${{ matrix.artifact_arch }}" == "arm64" ]; then
            echo "mapped_arch=aarch64" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.artifact_arch }}" == "x64" ]; then
            echo "mapped_arch=x64" >> $GITHUB_OUTPUT
          else
            echo "❌ Unknown arch: ${{ matrix.artifact_arch }}"
            exit 1
          fi

      - name: Output tag list for debugging
        shell: bash
        run: |
          git fetch --tags
          echo "📃 所有远端 tag："
          git tag --sort=-creatordate
          LATEST_TAG=$(git tag --sort=-creatordate | head -n 1)
          if [ -z "$LATEST_TAG" ]; then
            echo "⚠️ 未找到 tag，使用默认 tag：v0.1.13"
            LATEST_TAG="v0.1.13"
          fi
          echo "✅ 使用的 tag 是：$LATEST_TAG"
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV

      - uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.LATEST_TAG }}
          overwrite: true
          files: |
            # macOS 产物
            ${{ matrix.os == 'macos-latest' && format('src-tauri/target/{0}/release/bundle/macos/Aiden_{1}.app.tar.gz', matrix.rust_target, steps.arch_map.outputs.mapped_arch) || '' }}
            ${{ matrix.os == 'macos-latest' && format('src-tauri/target/{0}/release/bundle/macos/Aiden_{1}.app.tar.gz.sig', matrix.rust_target, steps.arch_map.outputs.mapped_arch) || '' }}
            ${{ matrix.os == 'macos-latest' && format('src-tauri/target/{0}/release/bundle/dmg/Aiden_{1}_{2}_signed.dmg', matrix.rust_target, env.PACKAGE_VERSION, steps.arch_map.outputs.mapped_arch) || '' }}

            # Windows 产物
            ${{ matrix.os == 'windows-latest' && format('src-tauri/target/{0}/release/bundle/msi/Aiden_{1}_x64_en-US.msi', matrix.rust_target, env.PACKAGE_VERSION) || '' }}
            ${{ matrix.os == 'windows-latest' && format('src-tauri/target/{0}/release/bundle/msi/Aiden_{1}_x64_en-US.msi.zip', matrix.rust_target, env.PACKAGE_VERSION) || '' }}
            ${{ matrix.os == 'windows-latest' && format('src-tauri/target/{0}/release/bundle/msi/Aiden_{1}_x64_en-US.msi.zip.sig', matrix.rust_target, env.PACKAGE_VERSION) || '' }}
            ${{ matrix.os == 'windows-latest' && format('src-tauri/target/{0}/release/bundle/nsis/Aiden_{1}_x64-setup.exe', matrix.rust_target, env.PACKAGE_VERSION) || '' }}
            ${{ matrix.os == 'windows-latest' && format('src-tauri/target/{0}/release/bundle/nsis/Aiden_{1}_x64-setup.nsis.zip', matrix.rust_target, env.PACKAGE_VERSION) || '' }}
            ${{ matrix.os == 'windows-latest' && format('src-tauri/target/{0}/release/bundle/nsis/Aiden_{1}_x64-setup.nsis.zip.sig', matrix.rust_target, env.PACKAGE_VERSION) || '' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-${{ matrix.arch }}-artifacts
          path: |
            src-tauri/target/${{ matrix.rust_target }}/release/bundle/**

  # 3. 生成 latest.json（只执行一次）
  generate-latest-json:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install crcmod
        run: pip install crcmod

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List downloaded artifacts
        run: ls -R artifacts

      - name: Get version
        shell: bash
        run: |
          VERSION=$(node -p "require('./src-tauri/tauri.conf.json').package.version")
          echo "PACKAGE_VERSION=$VERSION" >> $GITHUB_ENV

      - name: Generate latest.json
        run: bash .github/scripts/gen-latest-json.sh
        env:
          PACKAGE_VERSION: ${{ env.PACKAGE_VERSION }}

      - name: Output tag list for debugging
        shell: bash
        run: |
          git fetch --tags
          echo "📃 所有远端 tag："
          git tag --sort=-creatordate
          LATEST_TAG=$(git tag --sort=-creatordate | head -n 1)
          if [ -z "$LATEST_TAG" ]; then
            echo "⚠️ 未找到 tag，使用默认 tag：v0.1.13"
            LATEST_TAG="v0.1.13"
          fi
          echo "✅ 使用的 tag 是：$LATEST_TAG"
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV

      - name: Upload latest.json to release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.LATEST_TAG }}
          overwrite: true
          files: dist/latest.json
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

  # 4. 发布 release
  publish-release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    needs: [create-release, build, generate-latest-json]

    steps:
      - name: Publish release
        id: publish-release
        uses: actions/github-script@v6
        env:
          release_id: ${{ needs.create-release.outputs.release_id }}
        with:
          script: |
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: process.env.release_id,
              draft: false,
              prerelease: false
            })
