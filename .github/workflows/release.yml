name: Release App

on:
  workflow_dispatch:
  release:
    types: [published]

jobs:
  create-release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20.17.0"

      - name: Get version
        run: |
          echo "PACKAGE_VERSION=$(node -p "require('./src-tauri/tauri.conf.json').package.version")" >> $GITHUB_ENV

      - name: Create release (get latest release id)
        id: create-release
        uses: actions/github-script@v6
        with:
          script: |
            const { data } = await github.rest.repos.getLatestRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
            })
            return data.id

  build:
    needs: create-release
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          # mac 架构
          - arch: x86_64
            rust_target: x86_64-apple-darwin
            artifact_arch: x64
            os: macos-latest
          - arch: arm64
            rust_target: aarch64-apple-darwin
            artifact_arch: arm64
            os: macos-latest
          # windows 架构
          - arch: x86_64
            rust_target: x86_64-pc-windows-msvc
            artifact_arch: x64
            os: windows-latest

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20.17.0"
          cache: "yarn"

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.rust_target }}

      - name: Install frontend dependencies
        run: yarn install

      - name: Get package version
        shell: bash
        run: |
          echo "PACKAGE_VERSION=$(node -p \"require('./src-tauri/tauri.conf.json').package.version\")" >> $GITHUB_ENV

      - name: Update tauri config
        run: bash ./update_tauri_config.sh --mode release
        shell: bash

      - name: Download host_server, uv, bun binaries
        run: bash .github/scripts/download-bin.sh ${{ matrix.arch }} ${{ matrix.os }}
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        shell: bash

      - name: Inject environment variables
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            echo "NPM_CONFIG_REGISTRY=${{ secrets.NPM_CONFIG_REGISTRY }}" | Out-File -FilePath src-tauri/bin/.env -Encoding utf8
            Add-Content src-tauri/bin/.env "UV_INDEX=${{ secrets.UV_INDEX }}"
            Add-Content src-tauri/bin/.env "UV_DEFAULT_INDEX=${{ secrets.UV_DEFAULT_INDEX }}"
            Add-Content src-tauri/bin/.env "UV_EXTRA_INDEX_URL=${{ secrets.UV_EXTRA_INDEX_URL }}"
          else
            cat <<EOF > src-tauri/bin/.env
            NPM_CONFIG_REGISTRY=${{ secrets.NPM_CONFIG_REGISTRY }}
            UV_INDEX=${{ secrets.UV_INDEX }}
            UV_DEFAULT_INDEX=${{ secrets.UV_DEFAULT_INDEX }}
            UV_EXTRA_INDEX_URL=${{ secrets.UV_EXTRA_INDEX_URL }}
            HOST_SERVER_VERSION=$(cat .host_server_version)
            EOF
          fi

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}
          args: --target ${{ matrix.rust_target }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-${{ matrix.arch }}-artifacts
          path: |
            src-tauri/target/${{ matrix.rust_target }}/release/bundle/**

  # 3. 生成 latest.json（只执行一次）
  generate-latest-json:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install crcmod
        run: pip install crcmod

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List downloaded artifacts
        run: ls -R artifacts

      - name: Get version
        run: |
          echo "PACKAGE_VERSION=$(node -p "require('./src-tauri/tauri.conf.json').package.version")" >> $GITHUB_ENV

      - name: Generate latest.json
        run: bash .github/scripts/gen-latest-json.sh
        env:
          PACKAGE_VERSION: ${{ env.PACKAGE_VERSION }}

      - name: Upload latest.json to release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          overwrite: true
          files: dist/latest.json
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

  # 4. 发布 release
  publish-release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    needs: [create-release, build, generate-latest-json]

    steps:
      - name: Publish release
        id: publish-release
        uses: actions/github-script@v6
        env:
          release_id: ${{ needs.create-release.outputs.release_id }}
        with:
          script: |
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: process.env.release_id,
              draft: false,
              prerelease: false
            })
