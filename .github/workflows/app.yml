name: Release App

on:
  workflow_dispatch:
  release:
    types: [published]

jobs:
  create-release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}

    steps:
      - uses: actions/checkout@v4
      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: 18
      - name: get version
        run: echo "PACKAGE_VERSION=$(node -p "require('./src-tauri/tauri.conf.json').package.version")" >> $GITHUB_ENV
      - name: create release
        id: create-release
        uses: actions/github-script@v6
        with:
          script: |
            const { data } = await github.rest.repos.getLatestRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
            })
            return data.id
      - name: Add x86_64-apple-darwin target
        run: rustup target add x86_64-apple-darwin

  build-tauri:
    needs: create-release
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        config:
          - os: macos-latest
            arch: aarch64
            rust_target: x86_64-apple-darwin,aarch64-apple-darwin

    runs-on: ${{ matrix.config.os }}
    steps:
      - uses: actions/checkout@v4
      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: "yarn"
      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.config.rust_target }}
      - uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.config.os }}
      - name: install dependencies (ubuntu only)
        if: matrix.config.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf

      - name: install frontend dependencies
        run: yarn install # change this to npm or pnpm depending on which one you use

      - name: Update tauri config
        run: |
          sh ./update_tauri_config.sh --mode release

      - name: Check if jq is installed
        run: |
          if ! command -v jq &> /dev/null; then
            echo "jq not found, installing..."
            sudo apt-get install jq
          else
            echo "jq is already installed"
          fi

      - name: Download host_server and uv binaries and bun binaries
        run: |
          # 创建 bin 目录
          mkdir -p src-tauri/bin

          # 使用 GitHub API 获取最新的 host_server 下载链接
          echo "正在获取 host_server 下载链接..."
          ASSET_NAME="host_server_macos"
          ASSET_FILE="$ASSET_NAME.zip"
          REPO_OWNER="AllWiseAI"
          REPO_NAME="host-server-py"
          RELEASE_TAG=$(cat .host_server_version)

          # 获取 release 信息并提取下载链接
          echo "Fetching release info from GitHub API..."
          RELEASE_INFO=$(curl -s -H "Authorization: token ${{ secrets.GH_TOKEN }}" \
            "https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/releases/tags/$RELEASE_TAG")

          # 输出 release 信息以调试
          echo "Release Info: $RELEASE_INFO"

          # 从返回的 release 信息提取下载链接
          DOWNLOAD_URL=$(echo "$RELEASE_INFO" | jq -r ".assets[] | select(.name == \"$ASSET_FILE\") | .url")

          # 检查是否获取到下载链接
          if [ -z "$DOWNLOAD_URL" ]; then
            echo "Error: Download URL not found for $ASSET_FILE"
            exit 1
          else
            echo "Download URL: $DOWNLOAD_URL"
          fi

          # 下载 host_server 文件
          echo "正在下载 host_server 的压缩包..."
          curl -L -H "Authorization: token ${{ secrets.GH_TOKEN }}" -H "Accept: application/octet-stream" "$DOWNLOAD_URL" -o src-tauri/resources/$ASSET_FILE
          unzip src-tauri/resources/$ASSET_FILE -d src-tauri/resources/
          chmod +x src-tauri/resources/$ASSET_NAME/$ASSET_NAME
          echo "$ASSET_FILE 已成功下载并解压。"

          rm -rf src-tauri/resources/$ASSET_FILE
          echo "已删除 $ASSET_FILE 文件。"

          # 下载 uv 的压缩包
          echo "正在下载 uv 的压缩包..."
          curl -L https://github.com/astral-sh/uv/releases/download/0.6.17/uv-aarch64-apple-darwin.tar.gz -o src-tauri/bin/uv.tar.gz

          # 解压 uv 压缩包，只提取 uv 文件
          echo "正在解压 uv.tar.gz 并提取 uv 文件..."
          tar -xzf src-tauri/bin/uv.tar.gz -C src-tauri/bin --strip-components=1 uv-aarch64-apple-darwin/uv uv-aarch64-apple-darwin/uvx

          # 给 uv 文件添加执行权限
          chmod +x src-tauri/bin/uv
          chmod +x src-tauri/bin/uvx

          # 可选：清理临时文件
          rm -f src-tauri/bin/uv.tar.gz
          echo "uv binary 已成功下载并解压。"

          echo "正在下载 bun 的压缩包..."
          curl -L https://github.com/oven-sh/bun/releases/download/bun-v1.2.13/bun-darwin-aarch64.zip -o src-tauri/bin/bun.zip

          echo "正在解压 bun.zip..."
          unzip -o src-tauri/bin/bun.zip -d src-tauri/bin/
          mv src-tauri/bin/bun-darwin-aarch64/bun src-tauri/bin/bun
          rm -rf src-tauri/bin/bun-darwin-aarch64

          echo "给 bun 文件添加执行权限..."
          chmod +x src-tauri/bin/bun

          rm -f src-tauri/bin/bun.zip

          # 打印出 src-tauri/bin 目录下的所有文件，确保 uv 文件已成功提取
          echo "当前 src-tauri/bin 目录下的文件："
          ls -l src-tauri/bin
      - name: Inject environment variables to .env
        run: |
          cat <<EOF > src-tauri/bin/.env
          NPM_CONFIG_REGISTRY=${{ secrets.NPM_CONFIG_REGISTRY }}
          UV_INDEX=${{ secrets.UV_INDEX }}
          UV_DEFAULT_INDEX=${{ secrets.UV_DEFAULT_INDEX }}
          UV_EXTRA_INDEX_URL=${{ secrets.UV_EXTRA_INDEX_URL }}
          HOST_SERVER_VERSION=$(cat .host_server_version)
          EOF
      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGN_IDENTITY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_APP_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}
          args: ${{ matrix.config.os == 'macos-latest' && '--target universal-apple-darwin' || '' }}
      - name: List build artifacts
        run: ls -R src-tauri/target/
  publish-release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    needs: [create-release, build-tauri]

    steps:
      - name: publish release
        id: publish-release
        uses: actions/github-script@v6
        env:
          release_id: ${{ needs.create-release.outputs.release_id }}
        with:
          script: |
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: process.env.release_id,
              draft: false,
              prerelease: false
            })    
