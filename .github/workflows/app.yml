name: Release App

on:
  workflow_dispatch:
  release:
    types: [published]

jobs:
  create-release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: 18
      - name: get version
        run: |
          echo "PACKAGE_VERSION=$(node -p "require('./src-tauri/tauri.conf.json').package.version")" >> $GITHUB_ENV
      - name: create release
        id: create-release
        uses: actions/github-script@v6
        with:
          script: |
            const { data } = await github.rest.repos.getLatestRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
            })
            return data.id

  build-tauri:
    needs: create-release
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        config:
          - arch: x86_64
            rust_target: x86_64-apple-darwin
            artifact_arch: x64
          - arch: arm64
            rust_target: aarch64-apple-darwin
            artifact_arch: arm64

    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: "yarn"

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.config.rust_target }}

      - name: get version
        run: |
          echo "PACKAGE_VERSION=$(node -p \"require('./src-tauri/tauri.conf.json').package.version\")" >> $GITHUB_ENV

      - uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.config.arch }}

      - name: install frontend dependencies
        run: yarn install

      - name: Update tauri config
        run: |
          sh ./update_tauri_config.sh --mode release

      - name: Check if jq is installed
        run: |
          if ! command -v jq &> /dev/null; then
            echo "jq not found, installing..."
            sudo apt-get install jq
          else
            echo "jq is already installed"
          fi

      - name: Download host_server, uv, bun binaries
        run: bash .github/scripts/download-bin.sh ${{ matrix.config.arch }}
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Inject environment variables
        run: |
          cat <<EOF > src-tauri/bin/.env
          NPM_CONFIG_REGISTRY=${{ secrets.NPM_CONFIG_REGISTRY }}
          UV_INDEX=${{ secrets.UV_INDEX }}
          UV_DEFAULT_INDEX=${{ secrets.UV_DEFAULT_INDEX }}
          UV_EXTRA_INDEX_URL=${{ secrets.UV_EXTRA_INDEX_URL }}
          HOST_SERVER_VERSION=$(cat .host_server_version)
          EOF

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}
          args: --target ${{ matrix.config.rust_target }}

      - name: Setup macOS code signing
        run: bash .github/scripts/setup-macos-codesign.sh
        env:
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_SIGN_IDENTITY: ${{ secrets.APPLE_SIGN_IDENTITY }}

      - name: Sign all binaries and app
        run: bash .github/scripts/sign-all.sh ${{ matrix.config.arch }}
        env:
          APPLE_SIGN_IDENTITY: ${{ secrets.APPLE_SIGN_IDENTITY }}

      - name: Check missing signatures
        run: bash .github/scripts/check-signature.sh ${{ matrix.config.arch }}
        env:
          APPLE_SIGN_IDENTITY: ${{ secrets.APPLE_SIGN_IDENTITY }}

      - name: Notarize app and DMG
        run: bash .github/scripts/notarize.sh ${{ matrix.config.arch }}
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_APP_PASSWORD: ${{ secrets.APPLE_APP_PASSWORD }}
          APPLE_SIGN_IDENTITY: ${{ secrets.APPLE_SIGN_IDENTITY }}
          PACKAGE_VERSION: ${{ env.PACKAGE_VERSION }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}

      - name: List build artifacts
        run: ls -R src-tauri/target/

      # - name: Zip .app for upload
      #   run: |
      #     cd src-tauri/target/${{ matrix.config.rust_target }}/release/bundle/macos
      #     zip -r AidenChat_${{ matrix.config.artifact_arch }}.app.zip AidenChat.app

      # - uses: softprops/action-gh-release@v1
      #   with:
      #     tag_name: ${{ github.ref_name }}
      #     overwrite: true
      #     files: |
      #       src-tauri/target/arm64-apple-darwin/release/bundle/macos/AidenChat_arm64.app.zip
      #       src-tauri/target/arm64-apple-darwin/release/bundle/macos/AidenChat_arm64.app.zip.sig
      #       src-tauri/target/arm64-apple-darwin/release/bundle/dmg/AidenChat_${{ env.PACKAGE_VERSION }}_arm64_signed.dmg

      #       src-tauri/target/x86_64-apple-darwin/release/bundle/macos/AidenChat_x86_64.app.zip
      #       src-tauri/target/x86_64-apple-darwin/release/bundle/macos/AidenChat_x86_64.app.zip.sig
      #       src-tauri/target/x86_64-apple-darwin/release/bundle/dmg/AidenChat_${{ env.PACKAGE_VERSION }}_x86_64_signed.dmg

  publish-release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    needs: [create-release, build-tauri]

    steps:
      - name: publish release
        id: publish-release
        uses: actions/github-script@v6
        env:
          release_id: ${{ needs.create-release.outputs.release_id }}
        with:
          script: |
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: process.env.release_id,
              draft: false,
              prerelease: false
            })
