name: Release App

on:
  workflow_dispatch:
  release:
    types: [published]

jobs:
  create-release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 
          fetch-tags: true
      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: 18
      - name: get version
        run: |
          echo "📦 获取 src-tauri 中配置的版本号..."
          echo "PACKAGE_VERSION=$(node -p "require('./src-tauri/tauri.conf.json').package.version")" >> $GITHUB_ENV

          echo "🏷️ 获取最新 Git tag..."
          git fetch origin main --tags
          LATEST_TAG=$(git tag --sort=-creatordate | head -n 1)
          echo "最新的 Git tag 是: $LATEST_TAG"
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV
      - name: create release
        id: create-release
        uses: actions/github-script@v6
        with:
          script: |
            const { data } = await github.rest.repos.getLatestRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
            })
            return data.id
      - name: Add x86_64-apple-darwin target
        run: rustup target add x86_64-apple-darwin

  build-tauri:
    needs: create-release
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        config:
          - os: macos-latest
            arch: aarch64
            rust_target: x86_64-apple-darwin,aarch64-apple-darwin

    runs-on: ${{ matrix.config.os }}
    steps:
      - uses: actions/checkout@v4
      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: "yarn"
      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.config.rust_target }}
      - uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.config.os }}
      - name: install dependencies (ubuntu only)
        if: matrix.config.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf

      - name: install frontend dependencies
        run: yarn install # change this to npm or pnpm depending on which one you use

      - name: Update tauri config
        run: |
          sh ./update_tauri_config.sh --mode release

      - name: Check if jq is installed
        run: |
          if ! command -v jq &> /dev/null; then
            echo "jq not found, installing..."
            sudo apt-get install jq
          else
            echo "jq is already installed"
          fi

      - name: Download host_server and uv binaries and bun binaries
        run:  bash .github/scripts/download-bin.sh
      - name: Inject environment variables to .env
        run: |
          cat <<EOF > src-tauri/bin/.env
          NPM_CONFIG_REGISTRY=${{ secrets.NPM_CONFIG_REGISTRY }}
          UV_INDEX=${{ secrets.UV_INDEX }}
          UV_DEFAULT_INDEX=${{ secrets.UV_DEFAULT_INDEX }}
          UV_EXTRA_INDEX_URL=${{ secrets.UV_EXTRA_INDEX_URL }}
          HOST_SERVER_VERSION=$(cat .host_server_version)
          EOF
      - name: Setup macOS code signing certificate
        if: matrix.config.os == 'macos-latest'
        run: bash .github/scripts/setup-macos-codesign.sh
        env:
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_SIGN_IDENTITY: ${{ secrets.APPLE_SIGN_IDENTITY }}
      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
          args: ${{ matrix.config.os == 'macos-latest' && '--target universal-apple-darwin' || '' }}
      - name: Re-unlock keychain before manual signing
        if: matrix.config.os == 'macos-latest'
        run: |
          KEYCHAIN_PASSWORD="build_password"
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security set-key-partition-list -S apple-tool:,apple: -s -k "$KEYCHAIN_PASSWORD" build.keychain
      - name: Sign all binaries and app
        run: bash .github/scripts/sign-all.sh
        env:
          APPLE_SIGN_IDENTITY: ${{ secrets.APPLE_SIGN_IDENTITY }}
      - name: Check missing signatures
        run: bash .github/scripts/check-signature.sh
        env:
          APPLE_SIGN_IDENTITY: ${{ secrets.APPLE_SIGN_IDENTITY }}
      - name: Notarize app and DMG
        run: bash .github/scripts/notarize.sh
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_APP_PASSWORD: ${{ secrets.APPLE_APP_PASSWORD }}
          APPLE_SIGN_IDENTITY: ${{ secrets.APPLE_SIGN_IDENTITY }}
      - name: List build artifacts
        run: ls -R src-tauri/target/
      - name: Zip .app for upload
        run: |
          cd src-tauri/target/universal-apple-darwin/release/bundle/macos
          zip -r AidenChat.app.zip AidenChat.app
      - name: Output tag list for debugging
        run: |
          git fetch --tags
          echo "📃 所有远端 tag："
          git tag --sort=-creatordate
          echo "✅ 上传使用的 tag 是：${{ env.LATEST_TAG }}"
      - name: Upload notarized DMG and zipped .app to release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.LATEST_TAG || 'v0.1.13' }}
          files: |
            src-tauri/target/universal-apple-darwin/release/bundle/dmg/*.dmg
            src-tauri/target/universal-apple-darwin/release/bundle/macos/AidenChat.app.zip
            src-tauri/target/universal-apple-darwin/release/bundle/macos/latest.json
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
  publish-release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    needs: [create-release, build-tauri]

    steps:
      - name: publish release
        id: publish-release
        uses: actions/github-script@v6
        env:
          release_id: ${{ needs.create-release.outputs.release_id }}
        with:
          script: |
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: process.env.release_id,
              draft: false,
              prerelease: false
            })    
